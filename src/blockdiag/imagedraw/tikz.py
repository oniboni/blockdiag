# -*- coding: utf-8 -*-
'''
Created on Oct 29, 2019

@author: oni
'''
from blockdiag.imagedraw import base


tikz_extra_shpae_definition = '''% copy & paste from pgfmanual:1039
\\makeatletter
\\pgfdeclareshape{document}{
\\inheritsavedanchors[from=rectangle] % this is nearly a rectangle
\\inheritanchorborder[from=rectangle]
\\inheritanchor[from=rectangle]{center}
\\inheritanchor[from=rectangle]{north}
\\inheritanchor[from=rectangle]{south}
\\inheritanchor[from=rectangle]{west}
\\inheritanchor[from=rectangle]{east}
% ... and possibly more
\\backgroundpath{% this is new
% store lower right in xa/ya and upper right in xb/yb
\\southwest \\pgf@xa=\\pgf@x \\pgf@ya=\\pgf@y
\\northeast \\pgf@xb=\\pgf@x \\pgf@yb=\\pgf@y
% compute corner of ‘‘flipped page’’
\\pgf@xc=\\pgf@xb \\advance\\pgf@xc by-5pt % this should be a parameter
\\pgf@yc=\\pgf@yb \\advance\\pgf@yc by-5pt
% construct main path
\\pgfpathmoveto{\\pgfpoint{\\pgf@xa}{\\pgf@ya}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xa}{\\pgf@yb}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xc}{\\pgf@yb}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xb}{\\pgf@yc}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xb}{\\pgf@ya}}
\\pgfpathclose
% add little corner
\\pgfpathmoveto{\\pgfpoint{\\pgf@xc}{\\pgf@yb}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xc}{\\pgf@yc}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xb}{\\pgf@yc}}
\\pgfpathlineto{\\pgfpoint{\\pgf@xc}{\\pgf@yc}}
}
}
\\makeatother
'''

tikz_file_template = '''\\usetikzlibrary{{arrows.meta, shadows.blur}}

% generated by seqdiag

{}

\\begin{{tikzpicture}}[
{}
]

{content}

\\end{{tikzpicture}}
'''


def _node_position(x, y):
    '''
    translate to TikZ coordinate system and format
    '''
    return '({},{})'.format(round(x, 3), round(-y, 3))


def _rgb_color(r, g, b):
    return '{{rgb,255:red,{}; green,{}; blue,{}}}'.format(r, g, b)


class TikZDraw(base.ImageDraw):
    tikz_content = list()  # list of tikz instructions (strings)

    node_xscale = 6  # horizontal spacing
    node_yscale = 2  # vertical spacing
    node_spacing_head = 0.5 * node_yscale
    node_activity_box_width = 0.05
    node_activity_box_vertical_offset = node_yscale / 2
    activity_level_shift = .003 * node_xscale

    def __init__(self, filename, **kwargs):
        self.filename = filename
        self.diagram = kwargs.get('diagram')

    def _tikz_options(self):
        return '''    xscale={}, yscale={},
    baseBox/.style={{blur shadow}},
    actor/.style={{baseBox, fill=white, draw, minimum width={actor_width}pt, minimum height={actor_height}pt}},
    actorLine/.style={{draw, dash pattern=on 8pt off 4pt}},
    activityLine/.style={{baseBox, fill={activity_color}, draw}},
    arrowBase/.style={{shorten <={shorten_arrow}pt, shorten >={shorten_arrow}pt}},
    arrowLeft/.style={{{{Triangle[length={arrow_head_size}pt, width={arrow_head_size}pt]}}-, arrowBase}},
    arrowRight/.style={{-{{Triangle[length={arrow_head_size}pt, width={arrow_head_size}pt]}}, arrowBase}},
    arrowOpenLeft/.style={{{{Straight Barb[open, length={arrow_head_size}pt, width={arrow_head_size}pt]}}-, arrowBase}},
    arrowOpenRight/.style={{-{{Straight Barb[open, length={arrow_head_size}pt, width={arrow_head_size}pt]}}, arrowBase}},
    noteBox/.style={{shape=document, draw, fill={note_color}}}'''.format(
            self.node_xscale, self.node_yscale,
            actor_width=18 * self.node_xscale,
            actor_height=18 * self.node_yscale,
            activity_color=_rgb_color(255, 228, 181),  # aka 'moccasin'
            shorten_arrow=0.5 * self.node_xscale,
            arrow_head_size=round(1.5 * self.node_xscale),
            note_color=_rgb_color(255, 182, 193))

    def _draw_actor(self, actor):
        actor_head_pos = _node_position(
            actor.xy.x, -self.node_spacing_head)

        self.tikz_content.append(
            '\\node [actor] ({}) at {} {{{}}};'.format(actor.id, actor_head_pos, actor.label))

        bottom_pos = _node_position(actor.xy.x,
                                    self.diagram.colheight - 0.8)
        self.tikz_content.append(
            '\\draw [actorLine] ({}) -- {};'.format(actor.id,
                                                    bottom_pos))

    def _activity_pos(self, x, y, direction):
        '''
        @param direction: 'left' or 'right'
        '''
        x_ = self.node_activity_box_width / 2
        if direction == 'left':
            x_ = -x_

        return _node_position(x + x_, y)

    def _draw_activitiy_boxes(self, actor):
        def draw_activity_box(start, end, level):
            x_value = actor.xy.x + (level * self.activity_level_shift)
            start_pos = self._activity_pos(x_value, start, 'left')
            end_pos = self._activity_pos(x_value, end, 'right')

            self.tikz_content.append(
                '\\draw [activityLine] {} rectangle {};'.format(start_pos, end_pos))

        for activity in actor.activities:
            lifetime = activity.get('lifetime')
            level = activity.get('level', 0)
            if lifetime:
                start = lifetime[0]
                end = lifetime[-1] + 1
                draw_activity_box(start, end, level)

    def _draw_edge(self, edge):
        arrow_style = 'arrow{}{}'.format(
            'Open' if edge.asynchronous else '',
            'Left' if edge.direction == 'left' else 'Right')

        x_in_offset, x_out_offset = 0, 0
        if edge.diagonal:
            if edge.direction == 'left':
                x_out_offset = .25
            else:
                x_in_offset = -.25

        in_direction = 'left'
        path_options = ''
        if edge.direction == 'self':
            x_in_offset = -.25
            in_direction = 'right'
            path_options = ' [out=0, in=0, looseness=4]'

        out_pos = self._activity_pos(
            edge.left_node.xy.x, edge.order + x_out_offset, 'right')
        in_pos = self._activity_pos(
            edge.right_node.xy.x, edge.order - x_in_offset, in_direction)

        label_node = ''
        if edge.label:
            label_node_options = 'pos=0.05, anchor=south west'
            if edge.direction == 'left':
                label_node_options = 'pos=0.95, anchor=south east'

            label_node = ' node [{}] {{{}}}'.format(
                label_node_options, edge.label)

        edge_style = 'solid'
        if edge.style:
            edge_style = edge.style

        if edge.color:
            edge_style = edge_style + \
                ', color={}, '.format(_rgb_color(*edge.color))

        self.tikz_content.append(
            '\\draw [{}, {}] {} to{}{} {};'.format(
                arrow_style, edge_style, out_pos, path_options, label_node, in_pos))

    def _draw_separator(self, separator):
        path_style = 'double distance={}pt'.format(.2 * self.node_xscale)

        label_node_options = 'draw, fill={}'.format(
            _rgb_color(*separator.color))
        label_node = ' node [{}] {{{}}}'.format(
            label_node_options, separator.label)

        out_pos = _node_position(-.5, separator.order)
        in_pos = _node_position(self.diagram.colwidth - .5,
                                separator.order)

        self.tikz_content.append(
            '\\draw [{}] {} to{} {};'.format(
                path_style, out_pos, label_node, in_pos))

    def _draw_notes(self, edge):
        note_offset = 0.1
        if edge.leftnote:
            self.tikz_content.append(
                '\\node [noteBox, anchor=east] at {} {{{}}};'.format(
                    _node_position(edge.left_node.xy.x -
                                   note_offset, edge.order),
                    edge.leftnote))
        if edge.rightnote:
            self.tikz_content.append(
                '\\node [noteBox, anchor=west] at {} {{{}}};'.format(
                    _node_position(edge.right_node.xy.x +
                                   note_offset, edge.order),
                    edge.rightnote))

    def draw(self):
        self.tikz_content.append('% actors')
        for actor in self.diagram.nodes:
            self._draw_actor(actor)
            self._draw_activitiy_boxes(actor)

        self.tikz_content.append('')
        self.tikz_content.append('% actions')
        for edge in self.diagram.edges:
            self._draw_edge(edge)
            self._draw_notes(edge)

        for separator in self.diagram.separators:
            self._draw_separator(separator)

    def save(self):
        if self.filename:
            with open(self.filename, 'w', encoding='utf-8') as file:
                file.write(tikz_file_template.format(
                    tikz_extra_shpae_definition,
                    self._tikz_options(),
                    content='\n'.join(self.tikz_content)))


def setup(self):
    from blockdiag.imagedraw import install_imagedrawer
    install_imagedrawer('tikz', TikZDraw)
