# -*- coding: utf-8 -*-
'''
Created on Oct 29, 2019

@author: oni
'''
from blockdiag.imagedraw import base

tikz_file_template = '''\\usetikzlibrary{{arrows.meta, shadows.blur}}

% generated by seqdiag
\\begin{{tikzpicture}}[
{}
]

{content}

\\end{{tikzpicture}}
'''


def _node_position(x, y):
    '''
    translate to TikZ coordinate system and format
    '''
    return '({},{})'.format(round(x, 2), round(-y, 2))


def _rgb_color(r, g, b):
    return '{{rgb,255:red,{}; green,{}; blue,{}}}'.format(r, g, b)


class TikZDraw(base.ImageDraw):
    tikz_content = list()  # list of tikz instructions (strings)

    node_xscale = 6  # horizontal spacing
    node_yscale = 2  # vertical spacing
    node_spacing_head = 0.5 * node_yscale
    node_activity_box_width = 0.05
    node_activity_box_vertical_offset = node_yscale / 2

    def __init__(self, filename, **kwargs):
        self.filename = filename
        self.diagram = kwargs.get('diagram')

    def _tikz_options(self):
        return '''    xscale={}, yscale={},
    baseBox/.style={{blur shadow}},
    actor/.style={{baseBox, fill=white, draw, minimum width={actor_width}pt, minimum height={actor_height}pt}},
    actorLine/.style={{draw, dash pattern=on 8pt off 4pt}},
    activityLine/.style={{baseBox, fill={activity_color}, draw}},
    arrowBase/.style={{shorten <={shorten_arrow}pt, shorten >={shorten_arrow}pt}},
    arrowLeft/.style={{{{Latex[length={arrow_head_size}pt]}}-, arrowBase}},
    arrowRight/.style={{-{{Latex[length={arrow_head_size}pt]}}, arrowBase}}'''.format(
            self.node_xscale, self.node_yscale,
            actor_width=18 * self.node_xscale,
            actor_height=18 * self.node_yscale,
            activity_color=_rgb_color(255, 228, 181),  # aka 'moccasin'
            shorten_arrow=0.5 * self.node_xscale,
            arrow_head_size=round(1.5 * self.node_xscale))

    def _draw_actor(self, actor):
        actor_head_pos = _node_position(
            actor.xy.x, -self.node_spacing_head)

        self.tikz_content.append(
            '\\node [actor] ({}) at {} {{{}}};'.format(actor.id, actor_head_pos, actor.label))

        bottom_pos = _node_position(actor.xy.x,
                                    self.diagram.colheight - 0.8)
        self.tikz_content.append(
            '\\draw [actorLine] ({}) -- {};'.format(actor.id,
                                                    bottom_pos))

    def _activity_pos(self, x, y, direction):
        '''
        @param direction: 'left' or 'right'
        '''
        x_ = self.node_activity_box_width / 2
        if direction == 'left':
            x_ = -x_

        return _node_position(x + x_, y)

    def _draw_activitiy_boxes(self, actor):
        def draw_activity_box(start, end):
            start_pos = self._activity_pos(actor.xy.x, start, 'left')
            end_pos = self._activity_pos(actor.xy.x, end, 'right')

            self.tikz_content.append(
                '\\draw [activityLine] {} rectangle {};'.format(start_pos, end_pos))

        for activity in actor.activities:
            lifetime = activity.get('lifetime')
            if lifetime:
                start = lifetime[0]
                end = lifetime[-1] + 1
                draw_activity_box(start, end)

    def _draw_edge(self, edge):
        arrow_style = 'arrowRight'

        if edge.direction == 'left':
            arrow_style = 'arrowLeft'

        out_pos = self._activity_pos(edge.left_node.xy.x, edge.order, 'right')
        in_pos = self._activity_pos(edge.right_node.xy.x, edge.order, 'left')

        label_node = ''
        if edge.label:
            label_node_options = 'pos=0.05, anchor=south west'
            if edge.direction == 'left':
                label_node_options = 'pos=0.95, anchor=south east'

            label_node = ' node [{}] {{{}}}'.format(
                label_node_options, edge.label)

        edge_style = 'solid'
        if edge.style:
            edge_style = edge.style

        self.tikz_content.append(
            '\\draw [{}, {}] {} -- {}{};'.format(
                arrow_style, edge_style, out_pos, in_pos, label_node))
        # notecolor
        # style

    def draw(self):
        self.tikz_content.append('% actors')
        for actor in self.diagram.nodes:
            self._draw_actor(actor)
            self._draw_activitiy_boxes(actor)

        self.tikz_content.append('')
        self.tikz_content.append('% actions')
        for edge in self.diagram.edges:
            self._draw_edge(edge)

    def save(self):
        if self.filename:
            with open(self.filename, 'w', encoding='utf-8') as file:
                file.write(tikz_file_template.format(
                    self._tikz_options(),
                    content='\n'.join(self.tikz_content)))


def setup(self):
    from blockdiag.imagedraw import install_imagedrawer
    install_imagedrawer('tikz', TikZDraw)
